pragma solidity >=0.4.21 <0.6.0;

import '../bloodSupChain_accessControl/AccessControl.sol';
import '../bloodSupChain_core/Ownable.sol';

contract SupplyChain is AccessControl, Ownable{

  // address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  // uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  // mapping (uint => BloodHistory) itemsHistory;
  // mapping (uint => string[]) itemsHistory;
  mapping (uint => mapping(uint => string)) itemsHistoryMap;

  // struct BloodHistory {
  //   string Donated;
  //   string Collected;
  //   string Tested;
  //   string Processed;
  //   string Packed;
  //   string Stored;
  //   string Administered;
  //   string Received;
  // }


  // Define enum 'State' with the following values:
  enum State
  {
    Donated,  // 0
    Collected,  // 1
    Tested,     // 2
    Processed,    // 3
    Packed,       // 4
    Stored,    // 5
    Administered,   // 6
    Received   // 7
  }

  enum BloodType {
    Ap,  //A-positive
    An,
    Bp,
    Bn,
    ABp,
    ABn,
    Op,
    On
  }

  State constant defaultState = State.Donated;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    upc; // Universal Product Code (UPC), generated by the Donor, goes on the package, can be verified by the Patien
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address donorID; // Metamask-Ethereum address of the Donor
    string  donorName; // Donor Name
    string  donorInformation;  // Donor Information
    BloodType  bloodType; // Blood Type
    State   itemState;  // Product State as represented in the enum above
    address processingCenterID;  // Metamask-Ethereum address of the processing center
    address hospitalID; // Metamask-Ethereum address of the Hospital
    address patientID; // Metamask-Ethereum address of the Patient
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Donated(uint upc);
  event Collected(uint upc);
  event Tested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event Stored(uint upc);
  event Administered(uint upc);
  event Received (uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner(), "Only the owner can call the function");
    _;
  }

  // Define a modifer that checks to see if msg.sender is registered as Processing Center
  modifier onlyProcessingCenter() {
    require(isProcessingCenter(msg.sender), "Only processing center can call this function");
    _;
  }

  // Define a modifer that checks to see if msg.sender is registered as Hospital
  modifier onlyHospital() {
    require(isHospital(msg.sender), "Only Hospital can call this function");
    _;
  }

  // Define a modifer that checks to see if msg.sender is registered as Patient
  modifier onlyPatient() {
    require(isPatient(msg.sender), "Only Patient can call this function");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Donated
  modifier donated(uint _upc) {
    require(items[_upc].itemState == State.Donated, "The itemState must be Donated");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Collected
  modifier collected(uint _upc) {
    require(items[_upc].itemState == State.Collected, "The itemState must be Collected");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Tested
  modifier tested(uint _upc) {
    require(items[_upc].itemState == State.Tested, "The itemState must be Tested");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "The itemState must be Processed");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "The itemState must be Packed");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Stored
  modifier stored(uint _upc) {
    require(items[_upc].itemState == State.Stored, "The itemState must be Stored");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Administered
  modifier administered(uint _upc) {
    require(items[_upc].itemState == State.Administered, "The itemState must be Administered");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "The itemState must be Received");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'upc' to 1
  constructor() public payable {
    // owner = msg.sender;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner()) {
      selfdestruct(msg.sender);
    }
  }

  function transfer(address newOwner, uint _upc) public onlyOwner {
    transferOwnership(newOwner);
    items[_upc].ownerID = newOwner;
  }

  // Define a function 'donate' that allows a donor to mark an item 'Donated'
  function donate(string memory _donorName, string memory _donorInformation,
        BloodType _bloodType) public onlyOwner
  {
    Item memory newItem;

    newItem.upc = upc;
    newItem.ownerID = msg.sender;
    newItem.donorID = msg.sender;
    newItem.donorName = _donorName;
    newItem.donorInformation = _donorInformation;
    newItem.bloodType = _bloodType;
    newItem.itemState = State.Donated;

    items[upc] = newItem;

    // Emit the appropriate event
    emit Donated(upc);

    upc = upc + 1;
  }

  // Define a function 'collect' that allows a ProcessingCenter to mark an item 'Collected'
  function collect(uint _upc) public donated(_upc) onlyProcessingCenter onlyOwner {
    items[_upc].processingCenterID = msg.sender;
    items[_upc].itemState = State.Collected;

    emit Collected(_upc);
  }

  function test(uint _upc) public collected(_upc) onlyProcessingCenter onlyOwner {
    items[_upc].itemState = State.Tested;

    emit Tested(_upc);
  }

  function process(uint _upc) public tested(_upc) onlyProcessingCenter onlyOwner {
    items[_upc].itemState = State.Processed;

    emit Processed(_upc);
  }

  function pack(uint _upc) public processed(_upc) onlyProcessingCenter onlyOwner {
    items[_upc].itemState = State.Packed;

    emit Packed(_upc);
  }

  function store(uint _upc) public packed(_upc) onlyHospital onlyOwner {
    items[_upc].hospitalID = msg.sender;
    items[_upc].itemState = State.Stored;

    emit Stored(_upc);
  }

  function administer(uint _upc) public stored(_upc) onlyHospital onlyOwner {
    items[_upc].itemState = State.Administered;

    emit Administered(_upc);
  }

  function receive(uint _upc) public administered(_upc) onlyPatient onlyOwner {
    items[_upc].patientID = msg.sender;
    items[_upc].itemState = State.Received;

    emit Received(_upc);
  }

  // // Functions to set and get the TxHistory
  // function setTxDonated(uint _upc, string memory txHash) public onlyOwner onlyDonor {
  //   itemsHistory[_upc].Donated = txHash;
  // }

  // function setTxCollected(uint _upc, string memory txHash) public onlyOwner onlyProcessingCenter {
  //   itemsHistory[_upc].Collected = txHash;
  // }

  // function setTxTested(uint _upc, string memory txHash) public onlyOwner onlyProcessingCenter {
  //   itemsHistory[_upc].Tested = txHash;
  // }

  // function setTxProcessed(uint _upc, string memory txHash) public onlyOwner onlyProcessingCenter {
  //   itemsHistory[_upc].Processed = txHash;
  // }

  // function setTxPacked(uint _upc, string memory txHash) public onlyOwner onlyProcessingCenter {
  //   itemsHistory[_upc].Packed = txHash;
  // }

  // function setTxStored(uint _upc, string memory txHash) public onlyOwner onlyHospital {
  //   itemsHistory[_upc].Stored = txHash;
  // }

  // function setTxAdministered(uint _upc, string memory txHash) public onlyOwner onlyHospital {
  //   itemsHistory[_upc].Administered = txHash;
  // }

  // function setTxReceived(uint _upc, string memory txHash) public onlyOwner onlyPatient {
  //   itemsHistory[_upc].Received = txHash;
  // }

  // function getHistory(uint _upc) public view returns (
  //   string memory _donated,
  //   string memory _collected,
  //   string memory _tested,
  //   string memory _processed,
  //   string memory _packed,
  //   string memory _stored,
  //   string memory _administered,
  //   string memory _received
  // ) {
  //   _donated = itemsHistory[_upc].Donated;
  //   _collected = itemsHistory[_upc].Collected;
  //   _tested = itemsHistory[_upc].Tested;
  //   _processed = itemsHistory[_upc].Processed;
  //   _packed = itemsHistory[_upc].Packed;
  //   _stored = itemsHistory[_upc].Stored;
  //   _administered = itemsHistory[_upc].Administered;
  //   _received = itemsHistory[_upc].Received;
  // }

  function setHistory(uint item, uint pos, string memory s) public {
        itemsHistoryMap[item][pos] = s;
    }

    function getHistory(uint item) public view
    returns (string memory donateTx, string memory toPcTx, string memory toHospitalTx,
              string memory toPatientTx, string memory receivedTx){
        donateTx = itemsHistoryMap[item][0];
        toPcTx = itemsHistoryMap[item][1];
        toHospitalTx = itemsHistoryMap[item][2];
        toPatientTx = itemsHistoryMap[item][3];
        receivedTx = itemsHistoryMap[item][4];
    }

  // function to get detailed information about one item
  function getDetails(uint _upc) public view returns (
    address _ownerID,
    address _donorID,
    string memory _donorName,
    string memory _donorInformation,
    BloodType _bloodType,
    State _itemState,
    address _processingCenterID,
    address _hospitalID,
    address _patientID
  ) {
    _ownerID = items[_upc].ownerID;
    _donorID = items[_upc].donorID;
    _donorName = items[_upc].donorName;
    _donorInformation = items[_upc].donorInformation;
    _bloodType = items[_upc].bloodType;
    _itemState = items[_upc].itemState;
    _processingCenterID = items[_upc].processingCenterID;
    _hospitalID = items[_upc].hospitalID;
    _patientID = items[_upc].patientID;
  }
}